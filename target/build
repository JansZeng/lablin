#!/bin/sh
#
# Handle the main menu for building Lablin
#
# http://www.maxwit.com
# http://maxwit.googlecode.com
#
# Authors:
#     Tiger Yu   <tiger@maxwit.com>
#     Conke Hu   <conke@maxwit.com>
#     Fleya Hou  <fleya@maxwit.com>
#


build_basic_rootfs()
{
	local dir

	echo -n "Initializing rootfs "

	for dir in `ls ${APP_BUILD_PATH}`
	do
		if [ $dir != ${MWP_KERNEL} ]; then
			rm -rf ${APP_BUILD_PATH}/${dir}
			echo -n "."
		fi
	done

	# rm -rf ${ROOTFS_PATH}
	# mkdir -p ${ROOTFS_PATH}
	# echo -n "."

	cd ${ROOTFS_PATH}

	mkdir -p etc/init.d etc/udev/rules.d bin sbin lib usr/lib usr/bin usr/include usr/games proc sys dev root home tmp
	for i in 1 2 3 4 5 6 7 8
	do
		mkdir -p usr/share/man/man${i}
	done

	# fixme
	cp -a ${TOOLCHAIN_PATH}/usr/${TARGET_PLAT}/lib/*.so* lib/
	echo -n "."

	# cp -a ${ROOTFS_PATH}/lib/*.so* lib/
	# cp -a ${ROOTFS_PATH}/usr/${TARGET_PLAT}/lib/*.so* usr/lib/
	# cp -a ${ROOTFS_PATH}/usr/lib/*.so* usr/lib/
	# echo -n "."

	if [ ${USER} = root ]; then
		[ -e ${ROOTFS_PATH}/dev/console ] || \
			mknod ${ROOTFS_PATH}/dev/console c 5 1

		[ -e ${ROOTFS_PATH}/dev/null ] || \
			mknod ${ROOTFS_PATH}/dev/null c 1 3
	else
		echo "(TODO: create device nodes manually!)"
	fi

cat > ${ROOTFS_PATH}/etc/init.d/rcS << EOF
#!/bin/sh

echo
echo "    ***********************************"
echo "    *    Welcome to MaxWit Lablin!    *"
echo "    *    [ http://www.maxwit.com ]    *"
echo "    ***********************************"
echo

mount -t tmpfs tmpfs  /dev
mount -t sysfs sysfs  /sys
mount -t proc  proc   /proc
mount -t tmpfs tmpfs  /tmp

[ -e /dev/null ] || mknod /dev/null c 5 1

EOF

	chmod 755 ${ROOTFS_PATH}/etc/init.d/rcS

	local BB_OPT="ARCH=arm CROSS_COMPILE=${TARGET_PLAT}- CONFIG_PREFIX=${ROOTFS_PATH}"

	unpack_to ${MWP_BUSYBOX} target || exit 1

	cp ${MW_TOP_DIR}/target/${MWP_BUSYBOX}/defconfig ${APP_BUILD_PATH}/${MWP_BUSYBOX}/scripts/ && \
	make ${BB_OPT} defconfig || exit 1

	make ${BB_OPT} install || exit 1

	build_package ${MWP_UDEV} target
}


build_root_std()
{
	for pkg in \
		${MWP_SED} \
		${MWP_GAWK} \
		${MWP_ZLIB} \
		${MWP_PKG_CONFIG} \
		${MWP_COREUTILS} \
		${MWP_E2FS_LIBS} \
		${MWP_E2FS} \
		${MWP_UTIL_LINUX} \
		${MWP_SYSVINIT} \
		${MWP_COREUTILS} \
		${MWP_DEBUTILS} \
		${MWP_UTIL_LINUX} \
		${MWP_MODULE_INIT} \
		${MWP_UDEV} \
		;
	do
		build_package ${pkg} target
	done
}


run_qemu()
{
	QEMU_CONSOLE=0
	QEMU_MACH="realview"

	if [ x"${QEMU_CONSOLE}" != x"1" ]; then
		EXTRA_QEMU_OPT="-serial stdio"
		EXTRA_COMMAND_LINE="console=ttyAMA0" # fixme
	fi

	sudo qemu-system-${TARGET_ARCH} -M ${QEMU_MACH}-eb -kernel ${IMAGES_PATH}/zImage.${QEMU_MACH} -net nic -net tap ${EXTRA_QEMU_OPT} -append "root=/dev/nfs rw nfsroot=${QEMU_HOST_IP}:${ROOTFS_PATH} ip=${QEMU_MACH_IP}:${QEMU_HOST_IP}:${QEMU_HOST_IP}:255.255.255.0:maxwit.googlecode.com:eth0:off ${EXTRA_COMMAND_LINE}" | tee /tmp/log
}


create_image()
{
	local IMAGE_PREFIX=rootfs
	local IMG_RFS_PATH=${MAXWIT_TOP}/rootfs_final

	cp -av ${ROOTFS_PATH} ${IMG_RFS_PATH}

	cd ${IMG_RFS_PATH}

	rm -f `find -name "*.o"`
	rm -f `find -name "*.a"`
	rm -f `find -name "*.la"`
	rm -rf ${IMG_RFS_PATH}/usr/include

	cd ${IMG_RFS_PATH}/usr/share || exit 1
	for dir in `ls`;
	do
		case ${dir} in
		games)
			;;

		*)	echo "removing ${dir}"
			rm -rf ${dir}
			;;
		esac
	done

	for fn in `find ${IMG_RFS_PATH}`
	do
		if [ -x ${fn} ]; then
			echo -n "." 
			${TARGET_PLAT}-strip ${fn} 2>/dev/null
		fi
	done
	echo "."

	for img_tool in mkyaffsimage mkyaffs2image mkfs.jffs2 mkfs.cramfs cpio
	do
		TOOL_PATH=`which ${img_tool}`
		case "$TOOL_PATH" in
		*mkyaffsimage)
			echo "yaffs1 image: ${IMAGES_PATH}/${IMAGE_PREFIX}.yaffs1 ..."
			${TOOL_PATH} ${IMG_RFS_PATH} ${IMAGES_PATH}/${IMAGE_PREFIX}.yaffs1 > /dev/null
			chmod 0644 ${IMAGES_PATH}/${IMAGE_PREFIX}.yaffs1
			echo " OK."
			;;	
		*mkyaffs2image)
			echo -n "yaffs2 image: ${IMAGES_PATH}/${IMAGE_PREFIX}.yaffs2 ..."
			${TOOL_PATH} ${IMG_RFS_PATH} ${IMAGES_PATH}/${IMAGE_PREFIX}.yaffs2 > /dev/null
			chmod 0644 ${IMAGES_PATH}/${IMAGE_PREFIX}.yaffs2
			echo " OK."
			;;
		*mkfs.jffs2)
			echo -n "jffs2 image: ${IMAGES_PATH}/${IMAGE_PREFIX}_l.jffs2 ..."
			sudo ${TOOL_PATH} -r ${IMG_RFS_PATH} -s 2048 -e 0x20000 -l -p -n -o ${IMAGES_PATH}/${IMAGE_PREFIX}_l.jffs2
			echo " OK."
			echo -n "jffs2 image: ${IMAGES_PATH}/${IMAGE_PREFIX}_s.jffs2 ..."
			${TOOL_PATH} -r ${IMG_RFS_PATH} -s 512 -e 0x4000 -l -p -n -o ${IMAGES_PATH}/${IMAGE_PREFIX}_s.jffs2
			echo " OK."
			;;	
		*mkfs.cramfs)
			echo -n "cramfs image: ${IMAGES_PATH}/${IMAGE_PREFIX}.cramfs ..."
			${TOOL_PATH} -b 512 ${IMG_RFS_PATH} ${IMAGES_PATH}/${IMAGE_PREFIX}.cramfs 2>/dev/null
			echo " OK."
			;;
		*cpio)
			echo -n "ramdisk image: ${IMAGES_PATH}/${IMAGE_PREFIX}.rd ..."
			cd ${IMG_RFS_PATH} && find | ${TOOL_PATH} -o -H newc 2> /dev/null | gzip -9 > ${IMAGES_PATH}/${IMAGE_PREFIX}.rd
			echo " OK."
			;;
		*)
			echo "${img_tool} not found, skipping"
			;;
		esac
	done
}


build_all_app()
{
	for pkg in \
		${MWP_TSLIB} \
		${MWP_ALSA_UTILS} \
		${MWP_ALSA_LIB} \
		${MWP_MADPLAY} \
		${MWP_LIBMAD} \
		${MWP_LIBID3TAG} \
		${MWP_MPG123} \
		${MWP_FAAD2} \
		${MWP_JPEG} \
		${MWP_LIBUNGIF} \
		${MWP_LIBPNG} \
		${MWP_FBV} \
		${MWP_TIFF} \
		${MWP_FREETYPE}  \
		${MWP_DFB} \
		${MWP_DFB_EX} \
		${MWP_SDL} \
		${MWP_SDL_MIXER} \
		${MWP_SDL_IMAGE} \
		${MWP_SDL_TTF} \
		${MWP_MPLAYER} \
		${MWP_PRBOOM} \
		${MWP_WIRELESS_TOOLS} \
		${MWP_LIBUSB_COMPAT} \
		${MWP_USB_UTILS} \
		${MWP_LIBUSB} \
		${MWP_MTD_UTILS} \
		${MWP_E2FS} \
		;
	do
		build_package ${pkg} target
	done
}


build_linux_kernel()
{
	KERNEL_TOP="${MW_TOP_DIR}/target/${MWP_KERNEL}"
	KERN_OPT="ARCH=arm CROSS_COMPILE=${TARGET_PLAT}- INSTALL_MOD_PATH=${ROOTFS_PATH}"
	
	case "${TARGET_SOC}" in
	*)
		TARGET_MACH=realview
		;;
	esac
	
	if [ -e ${KERNEL_TOP}/${TARGET_MACH}_defconfig ]; then
		cp -v ${KERNEL_TOP}/${TARGET_MACH}_defconfig arch/${TARGET_ARCH}/configs/
	elif [ -e arch/${TARGET_ARCH}/configs/${TARGET_MACH}_defconfig ]; then
		sed -i -e 's/# CONFIG_AEABI.*/CONFIG_AEABI=y/' \
			-e '/CONFIG_OABI_COMPAT/d' \
			-e '/CONFIG_AEABI/a\# CONFIG_OABI_COMPAT is not set/' \
			-e 's/\(CONFIG_SYSFS_DEPRECATED.*\)=y/# \1 is not set/' \
			arch/${TARGET_ARCH}/configs/${TARGET_MACH}_defconfig
	else
		echo "${TARGET_MACH}: no corresponding kernel configuration found!"
		exit 1
	fi
	
	make ${KERN_OPT} ${TARGET_MACH}_defconfig
	
	make ${KERN_OPT} ${BUILD_JOBS} && \
	make ${KERN_OPT} modules_install ||  exit 1
	echo
	
	case "${TARGET_ARCH}" in
	x86 | i386 | x86_64)
		cp -v ${PWD}/arch/${TARGET_ARCH}/boot/bzImage ${IMAGES_PATH}/bzImage.${TARGET_MACH}
		;;
	
	mips*)
		cp vmlinux ${IMAGES_PATH}/vmlinux.${TARGET_MACH}
		;;
	
	*)
		cp arch/${TARGET_ARCH}/boot/zImage ${IMAGES_PATH}/zImage.${TARGET_MACH}
		;;
	esac
}
