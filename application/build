#!/bin/sh
#
# Handle the main menu for building Lablin
#
# http://www.maxwit.com
# http://maxwit.googlecode.com
#
# Authors:
#     Tiger Yu   <tiger@maxwit.com>
#     Conke Hu   <conke@maxwit.com>
#     Fleya Hou  <fleya@maxwit.com>
#


APP_TOP="${MW_TOP_DIR}/application"

BUILT_TAG=".maxwit_built"

BUILD_TOOLS_LIST="${MWP_ZLIB} ${MWP_PKG_CONFIG}"
# BUILD_TOOLS_LIST="${MWP_ZLIB} ${MWP_PKG_CONFIG} ${MWP_AUTOCONF} ${MWP_AUTOMAKE} ${MWP_PYTHON}"

# fixme for loop dependency
BuildAppPkg() 
{
	local df=""
	local subdir="${APP_TOP}/${1}"
	local srcdir="${APP_BUILD_PATH}/${1}"

	if [ -d "${subdir}" ]; then
		cd "${subdir}" 
	else
		echo "\"${subdir}\" does NOT exist!"
		return 1
	fi

	if [ -e "${srcdir}/${BUILT_TAG}" ]; then
		echo "\"${1}\" has been built."
		echo
		return 0
	fi

	if [ -f dep ]; then
		for df in `cat dep`
		do
			BuildAppPkg ${df} || return 1
		done
	fi	

	CheckPkg ${1}

	Unpack ${1} application

	# fixme
	if test -x  ${subdir}/build.sh; then
		${subdir}/build.sh || exit 1
	else
		./configure \
			--prefix=/usr \
			--host=${TARGET_PLAT} \
			--build=${BUILD_PLAT} \
			|| exit 1

		make && \
		make DESTDIR=${SYSROOT_PATH} install || exit 1
		# make DESTDIR=${ROOTFS_PATH} install || exit 1
	fi

	if test -x  ${subdir}/setup.sh; then
		cd ${subdir} && \
		. ./setup.sh || exit 1
	fi

	touch ${srcdir}/${BUILT_TAG}
	echo

	return 0
}


BuildAppList()
{
	local pkg=""

	for pkg in $*
	do
		BuildAppPkg ${pkg} || exit 1
	done
}


BuildBaseRoot()
{
	local dir

	echo -n "Initializing rootfs "

	for dir in `ls ${APP_BUILD_PATH}`
	do
		rm -rf ${APP_BUILD_PATH}/${dir}
		echo -n "."
	done

	rm -rf ${ROOTFS_PATH}
	mkdir -p ${ROOTFS_PATH}
	echo -n "."

	cd ${ROOTFS_PATH}

	mkdir -p etc/init.d etc/udev/rules.d bin sbin lib usr/lib usr/bin usr/include usr/games proc sys dev root home tmp
	for i in 1 2 3 4 5 6 7 8
	do
		mkdir -p usr/share/man/man${i}
	done

	cp -a ${SYSROOT_PATH}/lib/*.so* lib/
	echo -n "."
	cp -a ${SYSROOT_PATH}/usr/${TARGET_PLAT}/lib/*.so* usr/lib/
	cp -a ${SYSROOT_PATH}/usr/lib/*.so* usr/lib/
	echo -n "."

	if [ ${USER} = root ]; then
		[ -e ${ROOTFS_PATH}/dev/console ] || \
			mknod ${ROOTFS_PATH}/dev/console c 5 1

		[ -e ${ROOTFS_PATH}/dev/null ] || \
			mknod ${ROOTFS_PATH}/dev/null c 1 3
	else
		echo "(TODO: create device nodes manually!)"
	fi

cat > ${ROOTFS_PATH}/etc/init.d/rcS << EOF
#!/bin/sh

[ -e /dev/console ] || mknod /dev/console c 5 1

echo
echo "    ***********************************"
echo "    *    Welcome to MaxWit Lablin!    *"
echo "    *    [ http://www.maxwit.com ]    *"
echo "    ***********************************"
echo

mount -t sysfs sysfs  /sys
mount -t tmpfs tmpfs  /dev
mount -t proc  proc   /proc
mount -t tmpfs tmpfs  /tmp

EOF

	chmod 755 ${ROOTFS_PATH}/etc/init.d/rcS

	local BB_OPT="ARCH=arm CROSS_COMPILE=${TARGET_PLAT}- CONFIG_PREFIX=${ROOTFS_PATH}"

	Unpack ${MWP_BUSYBOX} application || exit 1

	cp ${APP_TOP}/${MWP_BUSYBOX}/defconfig ${APP_BUILD_PATH}/${MWP_BUSYBOX}/scripts/ -v && \
	make ${BB_OPT} defconfig || exit 1

	make ${BB_OPT} install || exit 1

	BuildAppPkg ${MWP_UDEV}
}


BuildRoot_CoreUtils()
{
	# fixme
	local pkg_list="\
				${MWP_SED} \
				${MWP_GAWK} \
				${BUILD_TOOLS_LIST} \
				${MWP_COREUTILS} \
				${MWP_E2FS_LIBS} \
				${MWP_E2FS} \
				${MWP_UTIL_LINUX} \
				${MWP_SYSVINIT} \
				${MWP_COREUTILS} \
				${MWP_DEBUTILS} \
				${MWP_UTIL_LINUX} \
				${MWP_MODULE_INIT} \
				${MWP_UDEV} \
				"

	BuildAppList ${pkg_list}
}


RunQemu()
{
	QEMU_CONSOLE=0
	QEMU_MACH="realview"

	if [ x"${QEMU_CONSOLE}" != x"1" ]; then
		EXTRA_QEMU_OPT="-serial stdio"
		EXTRA_COMMAND_LINE="console=ttyAMA0" # fixme
	fi

	sudo qemu-system-${TARGET_ARCH} -M ${QEMU_MACH}-eb -kernel ${IMAGES_PATH}/zImage.${QEMU_MACH} -net nic -net tap ${EXTRA_QEMU_OPT} -append "root=/dev/nfs rw nfsroot=${QEMU_HOST_IP}:${ROOTFS_PATH} ip=${QEMU_MACH_IP}:${QEMU_HOST_IP}:${QEMU_HOST_IP}:255.255.255.0:maxwit.googlecode.com:eth0:off ${EXTRA_COMMAND_LINE}" | tee /tmp/log
}


BuildImage()
{
	local IMAGE_PREFIX=rootfs
	local IMG_RFS_PATH=${MAXWIT_TOP}/rootfs_final

	cp -av ${ROOTFS_PATH} ${IMG_RFS_PATH}

	cd ${IMG_RFS_PATH}

	rm -f `find -name "*.o"`
	rm -f `find -name "*.a"`
	rm -f `find -name "*.la"`
	rm -rf ${IMG_RFS_PATH}/usr/include

	cd ${IMG_RFS_PATH}/usr/share || exit 1
	for dir in `ls`;
	do
		case ${dir} in
		games)
			;;

		*)	echo "removing ${dir}"
			rm -rf ${dir}
			;;
		esac
	done

	for fn in `find ${IMG_RFS_PATH}`
	do
		if [ -x ${fn} ]; then
			echo -n "." 
			${TARGET_PLAT}-strip ${fn} 2>/dev/null
		fi
	done
	echo "."

	for img_tool in mkyaffsimage mkyaffs2image mkfs.jffs2 mkfs.cramfs cpio
	do
		TOOL_PATH=`which ${img_tool}`
		case "$TOOL_PATH" in
		*mkyaffsimage)
			echo "yaffs1 image: ${IMAGES_PATH}/${IMAGE_PREFIX}.yaffs1 ..."
			${TOOL_PATH} ${IMG_RFS_PATH} ${IMAGES_PATH}/${IMAGE_PREFIX}.yaffs1 > /dev/null
			chmod 0644 ${IMAGES_PATH}/${IMAGE_PREFIX}.yaffs1
			echo " OK."
			;;	
		*mkyaffs2image)
			echo -n "yaffs2 image: ${IMAGES_PATH}/${IMAGE_PREFIX}.yaffs2 ..."
			${TOOL_PATH} ${IMG_RFS_PATH} ${IMAGES_PATH}/${IMAGE_PREFIX}.yaffs2 > /dev/null
			chmod 0644 ${IMAGES_PATH}/${IMAGE_PREFIX}.yaffs2
			echo " OK."
			;;
		*mkfs.jffs2)
			echo -n "jffs2 image: ${IMAGES_PATH}/${IMAGE_PREFIX}_l.jffs2 ..."
			sudo ${TOOL_PATH} -r ${IMG_RFS_PATH} -s 2048 -e 0x20000 -l -p -n -o ${IMAGES_PATH}/${IMAGE_PREFIX}_l.jffs2
			echo " OK."
			echo -n "jffs2 image: ${IMAGES_PATH}/${IMAGE_PREFIX}_s.jffs2 ..."
			${TOOL_PATH} -r ${IMG_RFS_PATH} -s 512 -e 0x4000 -l -p -n -o ${IMAGES_PATH}/${IMAGE_PREFIX}_s.jffs2
			echo " OK."
			;;	
		*mkfs.cramfs)
			echo -n "cramfs image: ${IMAGES_PATH}/${IMAGE_PREFIX}.cramfs ..."
			${TOOL_PATH} -b 512 ${IMG_RFS_PATH} ${IMAGES_PATH}/${IMAGE_PREFIX}.cramfs 2>/dev/null
			echo " OK."
			;;
		*cpio)
			echo -n "ramdisk image: ${IMAGES_PATH}/${IMAGE_PREFIX}.rd ..."
			cd ${IMG_RFS_PATH} && find | ${TOOL_PATH} -o -H newc 2> /dev/null | gzip -9 > ${IMAGES_PATH}/${IMAGE_PREFIX}.rd
			echo " OK."
			;;
		*)
			echo "${img_tool} not found, skipping"
			;;
		esac
	done
}


