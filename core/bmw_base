#!/bin/sh
#
# http://maxwit.github.com
#

# CPU: armv4/arm9, armv5/arm9e, armv6/arm11, armv7/cortex-a
# SoC/Plat
# Board/Machine

SRC_PATH=${MAXWIT_TOP}/source
BUILD_PATH=${LABLIN_TOP}/build
ROOTFS_PATH=${LABLIN_TOP}/rootfs
IMAGE_PATH=${LABLIN_TOP}/image

# host utils
UTILS_ROOT=${LABLIN_TOP}/utils

TOOLCHAIN_PATH=`which arm-linux-gcc`
TOOLCHAIN_PATH=${TOOLCHAIN_PATH%%/usr/bin/arm-linux-gcc}

# sub dirs in $BUILD_PATH
UTILS_BUILD_PATH=${BUILD_PATH}/host
TOOLCHAIN_BUILD_PATH=${BUILD_PATH}/toolchain
KERNEL_BUILD_PATH=${BUILD_PATH}/kernel
APP_BUILD_PATH=${BUILD_PATH}/target


if [ ! -d ${SRC_PATH} ]; then
	SRC_PATH=${LABLIN_TOP}/source
	mkdir -vp ${SRC_PATH}
fi

BUILD_ARCH=`uname -m`
BUILD_PLAT=`gcc -dumpmachine`

if [ "${BUILD_ARCH}" = x86_64 ]; then
	LIB_CFLAGS="-fPIC"
fi 


# fixme: prompt
TARGET_SOC="OMAP3530"

case "${TARGET_SOC}" in
	S3C2410 | S3C2440)
		TARGET_ARCH="arm"
		TARGET_PLAT="arm-maxwit-linux-gnueabi"
		BU_CPU_OPT="--with-float=soft"
		GCC_CPU_OPT="--with-float=soft --with-arch=armv4t --with-tune=arm920t"
		;;

	S3C6400 | S3C6410)
		TARGET_ARCH="arm"
		TARGET_PLAT="arm-maxwit-linux-gnueabi"
		GCC_CPU_OPT="--with-arch=armv6zk --with-tune=arm1176jzf-s"
		;;

	AT91SAM9261 | AT91SAM9263)
		TARGET_ARCH="arm"
		TARGET_PLAT="arm-maxwit-linux-gnueabi"
		BU_CPU_OPT="--with-float=soft"
		GCC_CPU_OPT="--with-float=soft --with-arch=armv5te --with-tune=arm926ej-s"
		;;

	# fixme
	PXA168 | PXA910)
		TARGET_ARCH="arm"
		TARGET_PLAT="arm-maxwit-linux-gnueabi"
		BU_CPU_OPT="--with-float=soft"
		GCC_CPU_OPT="--with-float=soft --with-arch=armv5te --with-tune=arm926ej-s"
		;;

	OMAP3430 | OMAP3530)
		TARGET_ARCH="arm"
		TARGET_PLAT="arm-maxwit-linux-gnueabi"
		GCC_CPU_OPT="--with-arch=armv7-a --with-tune=cortex-a8"
		;;

	malta)
		TARGET_ARCH="mips"
		QEMU_ARCH="mipsel"
		TARGET_PLAT="mipsel-maxwit-linux-gnu"
		GCC_CPU_OPT="--with-abi=32 --with-tune=mips32r2"
		;;

	loongson2f)
		TARGET_ARCH="mips"
		QEMU_ARCH="mips64el"
		TARGET_PLAT="mips64el-maxwit-linux-gnu"
		GCC_CPU_OPT="--with-abi=64 --with-tune=loongson2f"
		BU_CPU_OPT="--enable-64-bit-bfd"
		GLIBC_BUILDING_GCC="${TARGET_PLAT}-gcc -mabi=64"
		;;

	*)
		echo "NO target SoC is assigned!"
		exit 1
		;;
esac

export ROOTFS_PATH TOOLCHAIN_PATH BUILD_PLAT TARGET_PLAT
# fixme
export UTILS_ROOT GCC_CPU_OPT

[ -z "${GLIBC_BUILDING_GCC}" ] && export GLIBC_BUILDING_GCC="${TARGET_PLAT}-gcc" # fixme
[ -z "${QEMU_ARCH}" ] && QEMU_ARCH=${TARGET_ARCH}

grep "${TOOLCHAIN_PATH}" ~/.bashrc > /dev/null \
	|| echo "export PATH=\${PATH}:${TOOLCHAIN_PATH}/usr/bin" >> ~/.bashrc

echo ${PATH} | grep "${TOOLCHAIN_PATH}" > /dev/null \
	|| export PATH=${PATH}:${TOOLCHAIN_PATH}/usr/bin


# $1: package name
# $2: category
unpack_to()
{
	local pkg="${1}"
	local cat="${2}"
	local upkg=""

	mkdir -vp ${BUILD_PATH}/${cat} && \
	cd ${BUILD_PATH}/${cat}

	case "${pkg}" in
	binutils-* | gcc-* | glibc-* | eglibc-* | qtopia-*)
		upkg=${pkg}-build
		# rm -rf ${upkg}
		mkdir -p ${upkg}
		;;

	*)
		upkg="${pkg}"
		;;
	esac

	# fixme
	if [ -d ${pkg} ]; then
		echo "package \"${pkg}\" exists, skipped"
		cd ${upkg}
		echo
		return 0
	fi

	echo -n "Extracting \"${pkg}\" "

	if [ -z "${pkg}" ]; then
		echo "target dir NOT specified!"
		exit 1
	fi

	echo -n "."

	mkdir -p __temp__

	if test -f ${SRC_PATH}/${pkg}.tar.bz2; then
		tar jxf ${SRC_PATH}/${pkg}.tar.bz2 -C __temp__ || exit 1
	elif test -f ${SRC_PATH}/${pkg}.tar.gz; then
		tar zxf ${SRC_PATH}/${pkg}.tar.gz -C __temp__ || exit 1
	elif test -f ${SRC_PATH}/${pkg}.tar.xz; then
		tar Jxf ${SRC_PATH}/${pkg}.tar.xz -C __temp__ || exit 1
	else
		tar xf ${SRC_PATH}/${pkg}* -C __temp__ || exit 1
	fi

	echo -n "."

	# care about symbolic link?
	rm -rf ${pkg} && \
	mv __temp__/* ${pkg} && \
	rm -rf __temp__ \
	|| exit 1

	echo -n "."

	case "${pkg}" in
	glibc-*)
		rm -rf glibc-ports-${GLIBC_VER}
		tar xf ${SRC_PATH}/glibc-ports-${GLIBC_VER}.tar.* || exit 1
		mv glibc-ports-${GLIBC_VER} ${MWP_GLIBC}/ports
		;;
    eglibc-*)
		tar xf ${SRC_PATH}/eglibc-ports-${GLIBC_VER}.tar.* -C ${MWP_GLIBC} || exit 1
		;;
	esac

	echo  " OK."

	cd ${pkg} || exit 1

	which patch > /dev/null 2>&1 && \
	{
		for fpatch in `ls ${MW_TOP_DIR}/${cat}/${pkg}/*.patch 2>/dev/null`
		do
			patch -p1 -i ${fpatch} || exit 1
		done
	}

	if [ "${pkg}" != "${upkg}" ]; then
		cd ../${upkg}
	fi
}


# Downlaod packages
download_pkg()
{
	local pkg_link_list
	local pkg_link


	local DL_CMD="wget -t 10 -w 5 -P ${SRC_PATH} -c"

	pkg_link_list=${1}
	shift

	cd ${SRC_PATH}

	while test $# -ge 1
	do
		for pkg_link in ${pkg_link_list}
		do
			if [ -n "`echo ${pkg_link} | grep ${1}`" ];then
				pkg_name=`basename ${pkg_link}`
				if [ ! -f "${pkg_name}" ]; then
					${DL_CMD} ${pkg_link} -O ${pkg_name}
				fi
			fi
		done

		shift
	done
}


print_link()
{
	local pkg_link_list
	local pkg_link
	local mw_pkg_url="${SRC_PATH}/mw_pkg_url.txt"

	pkg_link_list=${1}
	shift
	
	rm -rf ${mw_pkg_url}

	echo
	echo "Generating package URLs:"
	while test $# -ge 1
	do
		for pkg_link in ${pkg_link_list}
		do
			if [ -n "`echo ${pkg_link} | grep ${1}`" ];then
				echo ${pkg_link} >>  ${mw_pkg_url}
				echo "    ${pkg_link}"
			fi
		done
		shift
	done

	echo
	echo "All URLs are generated and saved to file \"${mw_pkg_url}\"."
	echo "You may get them later with your favorate download utility :P"
	echo
}

# one and only one argument is accepted!!
check_pkgs()
{
	local lost_list=""
	local pkg=""
	local yes

	for pkg in $1
	do
		ls ${SRC_PATH}/${pkg}.tar.gz > /dev/null 2>&1 || \
		ls ${SRC_PATH}/${pkg}.tar.bz2 > /dev/null 2>&1 || \
		ls ${SRC_PATH}/${pkg}.tgz > /dev/null 2>&1 || \
		ls ${SRC_PATH}/${pkg}[ab].tar.gz > /dev/null 2>&1 || \
		ls ${SRC_PATH}/${pkg}[ab].tar.bz2 > /dev/null 2>&1 || \
		ls ${SRC_PATH}/${pkg}[ab].tgz > /dev/null 2>&1 || \
		{
			if [ -z "${lost_list}" ]; then
				lost_list="${pkg}"
			else
				lost_list="${lost_list} ${pkg}"
			fi
		}
	done

	[ -z "${lost_list}" ] && return 0

	echo
	echo
	echo "Following packages cound NOT be found in \"${SRC_PATH}\":"
	for pkg in ${lost_list}
	do
		echo "    $pkg"
	done

	echo
	download_pkg "${PLINK_LIST}" ${lost_list}

	# echo
	# echo -n "Download them now? (y/n) "
	# read dl
	# 
	# if [ "${dl}" = "y" -o "${dl}" = "Y" -o "${dl}" = "dl" -o "${dl}" = "Yes" ]; then
	# 	download_pkg "${PLINK_LIST}" ${lost_list}
	# else
	# 	print_link "${PLINK_LIST}" ${lost_list}	
	# 	exit 1
	# fi
}


# fixme for loop dependency
# $1 = package
# $2 = category 
build_package()
{
	local df=""
	local pkg=${1}
	local cat=${2}
	local subdir="${MW_TOP_DIR}/${cat}/${pkg}"
	local srcdir="${BUILD_PATH}/${cat}/${pkg}"
	local built_flag=".__lablin_built"

	if [ -f "${srcdir}/${built_flag}" ]; then
		echo "\"${1}\" has been built."
		echo
		return 0
	fi

	if [ -f ${subdir}/dep ]; then
		for df in `cat ${subdir}/dep`
		do
			build_package ${df} ${cat} || return 1
		done
	fi

	check_pkgs ${pkg}

	unpack_to ${pkg} ${cat}

	echo "Building \"${pkg}\" ..."

	# fixme
	if test -x ${subdir}/build.sh; then
		${subdir}/build.sh || exit 1
	else
		./configure \
			--prefix=/usr \
			--host=${TARGET_PLAT} \
			--build=${BUILD_PLAT} \
			|| exit 1

		make && \
		make DESTDIR=${ROOTFS_PATH} install || exit 1
	fi

	if test -x ${subdir}/setup.sh; then
		cd ${subdir} && \
		. ./setup.sh || exit 1
	fi

	touch ${srcdir}/${built_flag}
	echo

	return 0
}

